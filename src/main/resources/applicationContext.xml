<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<!-- ***********************数据源配置（c3p0）********************** -->
	
	<!-- 配置数据源，记得去掉myBatis-config.xml的数据源相关配置 -->
	<!--有时候会引入jdbc.properties文件，引入之后，会把数据库的信息配置在里面。这边在配置的时候只需要引入值就好了-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">			
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/pro_kunming?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="user" value="root" />
		<property name="password" value="123456" />		
	</bean>
	
	<!-- *********************数据源配置（c3p0）结束********************** -->
	
	
	
	<!-- **************************事务相关配置************************** -->
	
	<!-- 配置事务管理器,管理数据源事务处理 jdbc的事务管理器-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!--========================================
		下面接连的两个配置都是采用的基于aspectj的声明式事务管理
		可以将下面的两个配置去掉换为
			开启注解事务
			<tx:annotation-driver transaction-manager="transactionManager" />
			然后再业务层的类名上加上注解@Transactional,参数中可以设置传播行为，隔离级别等属性
			@Transactional 可以作用于接口、接口方法、类以及类方法上。
			当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。
		两者的效果是一样的，都能进行事务的管理
	==========================================-->
	
	<!-- 配置事务通知（增强或者叫做通知） -->
	<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误,rollback-for后面是异常类型
		  如果没有rollback-for="Exception"的话只会回滚运行时异常；try catch中的异常就不会回滚。
		  有些异常是不能进行事物的回滚的，例如在业务层逻辑有问题，但是数据依然写进数据库等需要回滚的事物
		  
		propagation: 事务的传播行为
		isolation： 事务的隔离级别
		resd-only: 只读
		rollback-for： 发生哪些异常回滚
		no-rollback-for: 发生哪些异常不回滚
		timeout：过期信息 
	-->
	<tx:advice id="advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
	<aop:config>
		<!--配置切面 ；在这个切面用的是pointcut切入点，在这个切面都会用advice这个事务的管理通知-->
		<aop:advisor advice-ref="advice" pointcut="execution(* com.cug.lab.serviceImpl.*.*(..))"/>
	</aop:config>
	
	<!-- **************************事务相关配置结束************************** -->
	
	
	
	<!-- **************************自动扫描******************************** -->
	<!-- 自动扫描组件，要把controller去除，他们是在spring-mvc.xml中配置，如果不去除会影响事务管理。  
		 和上面的比较在扫描包的同时去掉Controller然后在springmvc配置文件中只扫描Controller，避免扫描自己所带的包内容
	 --> 
	<context:component-scan base-package="com.cug.lab">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>	
	
	<!-- **************************自动扫描结束***************************** -->
	
	
	
	
	<!-- **************************mybatis配置**************************** -->
	
	<!-- 配置session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:myBatis-config.xml" />
		<!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置(每加一个bean就需要生成一个xml文件，然后在把xml文件加入到mybatis文件中)-->
		<!--如果xml文件是放在entity下面，那么直需要把value中的值改掉就好了-->
		<property name="mapperLocations" value="classpath:com/cug/lab/dao/*.xml"/>
	</bean>
	
	
	<!-- 在自己写的DAO层的实现类中会用的，将其注入到DAO的实现类中，当使用这个模板类的时候，
		  执行sql语句的时候就需要用命名空间和sql的id来唯一标识一条sql语句 ，去掉DAO层实现类之后，这个配置就没有作用了
	-->
	<!-- 配置SessionTemplate，已封装了繁琐的数据操作 为了简化事务管理的代码而提供的类-->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
   
	
	<!-- 
		 扫描basePackage下面的接口类，找到下面每一个类的全类名。
		 和mapping.xml的命名空间去比较，如果发现有一样的，
		spring会生成这个接口的代理对象，会用@Autowired方式注入（在service层），就不用再写实现类了
		 相当于之前的有实现类的写法，把用接口的全类名做命名空间，用接口中的方法名作为sql语句的id来找到一条具体的sql
	-->
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		<property name="basePackage" value="com.cug.lab.dao"/>
	</bean>
	
	<!-- **************************mybatis配置结束************************** -->
	
	
		
</beans>